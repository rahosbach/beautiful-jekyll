---
layout: post
title: What Affect does the Number of Players have on Texas Holdem Results?
tags: [heatmap, poker, Seaborn, Texas Holdem]
---

### Introduction
TFor some time now I've pondered the ease or difficulty in developing a poker simulator in Python.  Well, a little over a week ago I decided to try my hand (no pun intended) at creating a program that would simulate a hand of [Texas Holdem](https://en.wikipedia.org/wiki/Texas_hold_%27em) for a given number of players.

Texas Holdem is a well-defined poker variation with a basic structure: 
1. Each player is dealt two "hole" cards that are hidden from all other players.
2. Five community cards are dealt in three stages (betting happens at each stage).
3. Each player makes the best possible five-card hand from their two hole cards and the five community cards (poker hand descriptions and hierarchy are described [here](https://www.cardplayer.com/rules-of-poker/hand-rankings)).

In considering the hole cards, a general rule of thumb is that pairs, suited high cards (_e.g._, A-K or A-Q), and even off-suit A-K are the best to play with.  In contrast, hands such as 2-7 off-suit is the worst (no flush opportunity and no potential to connect the two cards in a straight).  However, what I really wanted to know is how does the win percentage associated with a particular set of hole cards vary based on the number of players in the hand.  My hypothesis is that the win percentage will be inversely proportional to the number of players (_i.e._, increasing the number of players decreases the hand's win percentage) by some unknown degree.

### Methodology and Assumptions
The simulator I created does not take into account any betting.  Instead, it assumes that all players remain in the hand until the very end.  In this way, the resulting win percentages should be conservative, because in an actual hand of Texas Holdem there generally only remain two or three players by the time the final (fifth) community card is dealt.  Therefore, in a real-world setting the eventual competition at the end of the hand would be lower.

I created the simulator using [Python 3](https://www.python.org/) in a [Jupyter notebook](https://jupyter.org/).  The code for the simulator only relies on Python's standard libraries (specifically, `collections`, `itertools`, `operator`, and `random`).  In addition, I did make use of Python's `multiprocessing` library and the [joblib](https://joblib.readthedocs.io/) library to achieve faster run times using parallel processing.  Finally, to analyze and plot the final results I relied on [Pandas](https://pandas.pydata.org/) and [Seaborn](https://seaborn.pydata.org/), respectively.

In order to estimate the win percentages for sets of hole cards (as well as eventual winning five-card hands), I used the [Monte Carlo method](https://en.wikipedia.org/wiki/Monte_Carlo_method).  Specifically, I simulated 100,000 hands each for 2-11 players (_i.e._, 100,000 hands for two players, 100,000 hands for three players, etc.).

### Results
Using parallelization, running 100,000 hands for each of 2-11 players took about 15 minutes to complete on my laptop.

### Concluding Thoughts
...
